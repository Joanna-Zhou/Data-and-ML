# class kNNVisualization:
#     def __init__(self, datasetName, method, k):
#         self.datasetName, self.method, self.k = datasetName, method, k
#         self.kNNy, self.rmse = RMSELoss_Regression(datasetName, method, k)
import pandas as pd
import matplotlib.pyplot as plt
from kNNValidation import *

def plotPredictionCurves(datasetName, method, kRange):
    '''
    Plot the prediction curve of RMSE(%) vs. k
    '''
    data = {'k':[], 'RMSE':[]}
    for k in kRange:
        data['k'].append(k)
        data['RMSE'].append(RMSELoss_Regression(datasetName, method, k))
    curve = pd.DataFrame(data)
    curve.plot(x='k',y='RMSE')
    plt.savefig('kNNRegression-PredCurve-mauna_loa(1).png')
    return curve

# def plotTestSet_Regression(datasetName, method, k):
#     '''
#     Plot the test set's predicted y-values vs. labelled y-values
#     '''
#     # foldindex doesn't matter here, we will use training + validation datasets together
#     kNNtest = kNNTraining(datasetName, method, k, 5)
#
#     # kNNtest.x_train = np.concatenate([kNNtest.x_train, kNNtest.x_valid])
#     # kNNtest.y_train = np.concatenate([kNNtest.y_train, kNNtest.y_valid])
#     # kNNtest.num_trainSet += kNNtest.num_validSet
#     y_kNN = []
#
#     for i in range(kNNtest.num_testSet):
#         kNNValue, error, correctness = kNNtest.kNNRegression(kNNtest.x_test[i], kNNtest.y_test[i])
#
#     # for i in range(kNNtest.num_testSet):
#     #     kNNValue, error, correctness = kNNtest.kNNRegression(kNNtest.x_test[i], kNNtest.y_test[i])
#         print(kNNtest.y_test[i], kNNValue)
#         y_kNN.append(kNNValue)
#     print(y_kNN)
#     # print(list(np.transpose(kNNtest.x_test)[0]), len(list(np.transpose(kNNtest.x_test)[0])))
#     # print(list(np.transpose(kNNtest.y_test)[0]), len(list(np.transpose(kNNtest.y_test)[0])))
#     # print(y_kNN, len(y_kNN))
#
#     data = {'x': list(np.transpose(kNNtest.x_test)[0]), 'y': list(np.transpose(kNNtest.y_test)[0]), 'y_kNN': y_kNN}
#     df = pd.DataFrame(data)
#     df.plot(kind='line',x='x',y='y',ax=plt.gca())
#     df.plot(kind='line',x='x',y='y_kNN', color='red', ax=plt.gca())
#     plt.savefig('kNNRegression-TestSet-mauna_loa.png')

def plotTestSet_Regression(datasetName, method, k):
    '''
    Plot the test set's predicted y-values vs. labelled y-values
    '''
    # foldindex doesn't matter here, we will use training + validation datasets together
    kNNtest = kNNTraining(datasetName, method, k, 2)

    # kNNtest.x_train = np.concatenate([kNNtest.x_train, kNNtest.x_valid])
    # kNNtest.y_train = np.concatenate([kNNtest.y_train, kNNtest.y_valid])
    # kNNtest.num_trainSet += kNNtest.num_validSet
    y_kNN = []

    for i in range(kNNtest.num_validSet):
        kNNValue, error, correctness = kNNtest.kNNRegression(kNNtest.x_valid[i], kNNtest.y_valid[i])

    # for i in range(kNNtest.num_testSet):
    #     kNNValue, error, correctness = kNNtest.kNNRegression(kNNtest.x_test[i], kNNtest.y_test[i])
        print(kNNtest.y_valid[i], kNNValue)
        y_kNN.append(kNNValue)
    print(y_kNN)
    # print(list(np.transpose(kNNtest.x_test)[0]), len(list(np.transpose(kNNtest.x_test)[0])))
    # print(list(np.transpose(kNNtest.y_test)[0]), len(list(np.transpose(kNNtest.y_test)[0])))
    # print(y_kNN, len(y_kNN))

    data = {'x': list(np.transpose(kNNtest.x_valid)[0]), 'y': list(np.transpose(kNNtest.y_valid)[0]), 'y_kNN': y_kNN}
    df = pd.DataFrame(data)
    df.plot(kind='scatter',x='x',y='y',ax=plt.gca())
    df.plot(kind='scatter',x='x',y='y_kNN', color='red', ax=plt.gca())
    plt.savefig('kNNRegression-TestSet-mauna_loa.png')


if __name__ == '__main__':
    # print(plotPredictionCurves('mauna_loa', 'l2', range(1, 2)))
    for k in range(3, 4):
        plotTestSet_Regression('mauna_loa', 'l2', k)
